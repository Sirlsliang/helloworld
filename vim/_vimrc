set nocompatible
filetype off 
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set nu "显示行号

syntax on

"Turn backup off
set nobackup
set nowritebackup
set noswapfile
"cancel .un~  file
set noundofile

"Text display settings
set linebreak
set textwidth=120
set autoindent "插入模式下，对每行按与上行的标准进行缩进，与shiftwidth选项结合使用
"设置C样式的缩进格式
set cindent
set nowrap "自动换行
set whichwrap=b,s<,>,[,] "光标处于行首时用<BS>（删除键）可以回到上一行的行尾，空格键可以用space键移动到下一行的行首
"设置行距
set linespace=3

"vim启动位置相关
winpos 0 0
set lines=35
set columns=80
"菜单栏相关
set guioptions-=m
set guioptions-=T
set guioptions-=r
"隐藏顶边栏
set showtabline=0

"配色
color desert
set guifont=consolas:h15 "字体及大小

"编码相关
set fileencodings=utf-8,bg18030,gbk,big5
set encoding=utf-8 "VIM内部使用的字符编码方式，Vim 的缓冲区，菜单文本、消息文本等
set termencoding=utf-8
"一定在编码的后面,不然右键还是会乱码
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

"搜索时忽略大小写
set ignorecase
set nohlsearch "不要高亮被搜索的句子
"匹配括号高亮的时间(十分之一秒)
set matchtime=5
"显示匹配的括号
set showmatch
"启用鼠标
set mouse=a
set selection=exclusive
set selectmode=mouse,key

"光标移动到buffer的顶部和底部时保持的距离
set scrolloff=3

"突出显示当前行
set cursorline
"突出显示当前列
"set cursorcolumn

set backspace=indent,eol,start
"set langmenu=zh_CN.UTF-8 "使用中文菜单

"文本编辑设置
set sw=2 "自动缩进时，缩进尺寸为4
set ts=2 "Tab宽度为4
set et	"编辑时将所有Tab替换为空格。如果希望将已有的Tab替换为空格，使用:retab命令
set smarttab	"使用et将Tab替换为空格后，按一下Tab键就能插入4个空格，删除时，设置了该选项可一并删除
"set spell "打开拼写检查

"断行设置
set tw=100 "120列之后断行
set lbr "不在单词中间断行。
set fo+=mB  "打开断行模块对亚洲语言支持。m表示允许在两个汉字之间断行，B表示将两行合为一行时，汉字之间不需要补空格

"编码设置
set sm "显示括号配对情况
set cin "打开C/C++风格的自动缩进，即用V选择，用=进行自动缩进的设置


set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction

set rtp+=%vim%/vimfiles/bundle/Vundle.vim/

call vundle#begin('D:/vim/vimfiles/bundle/')
Plugin  'VundleVim/Vundle.vim'
Plugin  'scrooloose/nerdtree'
Plugin  'Lokaltog/vim-powerline'
Plugin  'Yggdroot/indentLine' "缩进指示线，需要在vimrc中配置
Plugin  'tell-k/vim-autopep8' "按<F8>即可自动依照pep8标准自动格式化代码（python）
Plugin  'jiangmiao/auto-pairs'  "括号和引号自动补全
Plugin  'scrooloose/nerdcommenter'  "写注释时使用
Plugin  'iamcco/markdown-preview.vim'  "markdown的预览软件
call vundle#end()
filetype plugin indent on

"auto open NerdTree
"autocmd vimenter * NERDTree
"Ctrl+n
map <F1> :NERDTreeToggle<CR>
"let g:NERDTreeDirArrowExpandable ='?'
"let g:NERDTreeDirArrowCollapsible ='?'
"power-line
set laststatus=2

"缩进指示线
let g:indentLine_char='|'
let g:indentLine_enabled = 1

"autopep8设置
let g:autopep8_disable_show_diff = 1

"nerdcommenter相关配置
let mapleader=','
"按下F2，对句子进行注释
map <F2> <leader>ci <CR>
" add space after comment delimiters(分隔符) by default
let g:NERDSpaceDelims = 1
"use compact（小型的） syntax for prettified(美化) multi-line comments
let g:NERDCompactSexyComs = 1
"Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
"set a language to use its alternate delimiters by default
let g:NERDDALTDelims_java = 1
"add your own custom formats or override the defaults
let g:NERDCustomDelimiters = {'c':{'left':'/**','right':'*/'}}
"allow commenting and inverting empty lines(useful when commenting a region)
let g:NERDCommentEmptyLines = 1
"Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

"python 自动执行
map <F5> :Autopep8<CR> :w<CR> :call RunPython()<CR>
function RunPython()
  let mp = &makeprg
  let ef = &errorformat
  let exeFile = expand("%:t")
  setlocal makeprg=python\ -u
  set efm=%C %.%#,%A\ \ File\ \"%f\"\\, \ line\ %1%.%#,%Z[%^\ ]%\\@=%m
  silent make %
  copen
  let &makeprg = mp
  let &errorformat = ef
endfunction
imap jj <Esc>
imap <Up>    <nop>
imap <Down>  <nop>
imap <Right> <nop>
imap <Left>  <nop>
map <Up>    <nop>
nmap <Down>  <nop>
nmap <Right> <nop>
nmap <Left>  <nop>
let g:mkdp_auto_start=0
let g:mkdp_auto_open =1
let g:mkdp_auto_close=1
let g:mkdp_path_to_chrome='D:\\firefox\firefox.exe'


nmap <silent> <F8> <Plug>MarkdownPreview        " 普通模式
imap <silent> <F8> <Plug>MarkdownPreview        " 插入模式
nmap <silent> <F9> <Plug>StopMarkdownPreview    " 普通模式
imap <silent> <F9> <Plug>StopMarkdownPreview    " 插入模式
